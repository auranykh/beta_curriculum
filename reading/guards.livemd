<<<<<<< HEAD
# Guards

## Guards

Guards allow you to guard your functions to only accept certain input.

```mermaid
flowchart LR
Input --> Guard --> Function
Guard --> f[Invalid Input]
```

This prevents a function from being misused and 
provides clearer feedback.

For example, you may have a function like `double/1` which doubles a number.

```elixir
defmodule Multiplier do
  def double(num1) do
    num1 * 2
  end
end

Multiplier.double(4)
```

You'll notice that we can pass in strings to the `Mutliplier.double/1` function, and the program will error. 
However, to an outside user, that error could be unclear.

```elixir
defmodule Multiplier do
  def double(num1) do
    num1 * 2
  end
end

Multiplier.double("")
```

To enforce the function is only called with integers, we can use the built-in `is_integer` guard 
and the `when` guard operator.

Now when you call the `double/1` function, it will let you know that the function does not exist
for string arguments.

```elixir
defmodule Multiplier do
  def double(value) when is_integer(value) do
    value * 2
  end
end

Multiplier.double("")
```

## Polymorphic Functions With Guards

You can also use guards in combination with multi-clause functions to
achieve polymorphism.

For example, let's say we want the `double` function to handle strings.
So `double` called with `"hello"` would return `"hellohello"`.

```mermaid
flowchart LR
  2 --> a[double] --> 4
  hello --> b[double] --> hellohello
```

We can use the built-in `is_bitstring` guard to check if the variable is a string.

```elixir
defmodule Multiplier do
  def double(num) when is_integer(num) do
    num * 2
  end

  def double(string) when is_bitstring(string) do
    string <> string
  end
end

Multiplier.double("example")
```

There are many guards available in Elixir. If you ever need a specific guard, you can refer to the
[Guards](https://hexdocs.pm/elixir/1.13/Kernel.html#guards) documentation.

Function order matters. The first function who's function head matches the input executes.

For example. if you remove
the `is_integer/1` guard. Now the first function expects any type of input, so it will always
execute instead of the `is_bitstring/1` version.

```elixir
defmodule Multiplier do
  def double(num) do
    num * 2
  end

  def double(string) when is_bitstring(string) do
    string <> string
  end
end

Multiplier.double("example")
```

You'll notice our program crashes with an error.

We also get a warning 
**this clause for double/1 cannot match because a previous clause at line 2 always matches**.
Because Elixir catches that the first function clause always matches before the second.

If you move the more generic function lower, then strings will match the
`is_bitstring/1` version first.

As a side benefit, **Floats** now work as well! 
Previously they failed the `is_integer/1` guard.

```elixir
defmodule Multiplier do
  def double(string) when is_bitstring(string) do
    string <> string
  end

  def double(num) do
    num * 2
  end
end

Multiplier.double("example")
```

```elixir
Multiplier.double(1)
```

```elixir
Multiplier.double(2.5)
```

### Your Turn

In the Elixir cell below,

* Create a module `Math` with an `add/2` function that only accepts integers.
* Create another `Math.add/2` version to add two strings.
* Create another `Math.add/2` version to add two lists.

```elixir

```
=======
# Guards

## Navigation

[Return Home](../start.livemd)

## Guards

Guards allow you to guard your functions to only accept certain input.

```mermaid
flowchart LR
Input --> Guard --> Function
Guard --> f[Invalid Input]
```

This prevents a function from being misused and 
provides clearer feedback.

For example, you may have a function like `double/1` which doubles a number.

```elixir
defmodule Multiplier do
  def double(num1) do
    num1 * 2
  end
end

Multiplier.double(4)
```

You'll notice that we can pass in strings to the `Mutliplier.double/1` function, and the program will error. 
However, to an outside user, that error could be unclear.

```elixir
defmodule Multiplier do
  def double(num1) do
    num1 * 2
  end
end

Multiplier.double("")
```

To enforce the function is only called with integers, we can use the built-in `is_integer` guard 
and the `when` guard operator.

Now when you call the `double/1` function, it will let you know that the function does not exist
for string arguments.

```elixir
defmodule Multiplier do
  def double(value) when is_integer(value) do
    value * 2
  end
end

Multiplier.double("")
```

## Polymorphic Functions With Guards

You can also use guards in combination with multi-clause functions to
achieve polymorphism.

For example, let's say we want the `double` function to handle strings.
So `double` called with `"hello"` would return `"hellohello"`.

```mermaid
flowchart LR
  2 --> a[double] --> 4
  hello --> b[double] --> hellohello
```

We can use the built-in `is_bitstring` guard to check if the variable is a string.

```elixir
defmodule Multiplier do
  def double(num) when is_integer(num) do
    num * 2
  end

  def double(string) when is_bitstring(string) do
    string <> string
  end
end

Multiplier.double("example")
```

There are many guards available in Elixir. If you ever need a specific guard, you can refer to the
[Guards](https://hexdocs.pm/elixir/1.13/Kernel.html#guards) documentation.

Function order matters. The first function who's function head matches the input executes.

For example. if you remove
the `is_integer/1` guard. Now the first function expects any type of input, so it will always
execute instead of the `is_bitstring/1` version.

```elixir
defmodule Multiplier do
  def double(num) do
    num * 2
  end

  def double(string) when is_bitstring(string) do
    string <> string
  end
end

Multiplier.double("example")
```

You'll notice our program crashes with an error.

We also get a warning 
**this clause for double/1 cannot match because a previous clause at line 2 always matches**.
Because Elixir catches that the first function clause always matches before the second.

If you move the more generic function lower, then strings will match the
`is_bitstring/1` version first.

As a side benefit, **Floats** now work as well! 
Previously they failed the `is_integer/1` guard.

```elixir
defmodule Multiplier do
  def double(string) when is_bitstring(string) do
    string <> string
  end

  def double(num) do
    num * 2
  end
end

Multiplier.double("example")
```

```elixir
Multiplier.double(1)
```

```elixir
Multiplier.double(2.5)
```

### Your Turn

In the Elixir cell below,

* Create a module `Math` with an `add/2` function that only accepts integers.
* Create another `Math.add/2` version to add two strings.
* Create another `Math.add/2` version to add two lists.

```elixir

```
>>>>>>> Main
