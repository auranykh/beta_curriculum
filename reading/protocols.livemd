# Protocols

## Protocols

In english, a protocol means a set of rules or procedures. In Elixir, a protocol allows us to 
create a common functionality, with different implementations.

Specifically, protocols enable polymorphic behavior based off of data.

```mermaid
flowchart
  A -- data --> B
  B --> C
  B --> D
  B --> E
  B --> F

  A[Caller]
  B[Protocol]
  C[Implementation]
  D[Implementation]
  E[Implementation]
  F[Implementation]
```

<!-- livebook:{"break_markdown":true} -->

For example, the `Enum` module works with any collection data type. Under the hood, it uses the 
`Enumerable` protocol.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
  E[Enum]
  EN[Enumerable]
  E --> EN
  EN --> Map
  EN --> List
  EN --> k[Keyword List]
```

<!-- livebook:{"break_markdown":true} -->

It then executes the appropriate instructions depending on which data type the `Enum` function
is called with.

```elixir
Enum.random(%{one: 1, two: 2})
```

```elixir
Enum.random(1..20)
```

```elixir
Enum.random(one: 1, two: 2)
```

## Create an Adder protocol

Anytime you need a common function for multiple data types or structs, you
can consider a protocol.

For example, let's create an `Adder` protocol
that's going to add two values together. It will accept integers, strings, and lists
and hide the specifics of which operator is necessary to add different types.

<!-- livebook:{"force_markdown":true} -->

```elixir
Adder.add(1, 2)
3

Adder.add("hello, ", "world")
"hello, world"

Adder.add([1], [2])
[1, 2]
```

So if we give the protocol an integer, it will use the implementation for `Integer`.
If we provide the protocol a string, it will use the implementation for `BitString`, and 
if we provide the protocol a list, it will use the implementation for `List`.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart
  A -- Integer --> B
  B -- Integer --> C
  B -- BitString --> D
  B -- List --> E
  style C color:green
  style D color:red
  style E color:red
  A[Caller]
  B[Adder Protocol]
  C[Integer Implementation]
  D[String Implementation]
  E[List Implementation]
```

`List`, `Integer`, and `BitString` are all built-in Elixir modules used to define
which data type the protocol implementation is for.

We define a protocol using `defprotocol` and define a function clause. We only need the function
head, not the function body.

```elixir
defprotocol Adder do
  def add(value, value)
end
```

We've defined a protocol above, but we haven't implemented it for any data type yet.

Notice the error for `Adder.add/2` called with two integers says 
`protocol Adder not implemented for 1 of type Integer`

```elixir
Adder.add(1, 2)
```

To define an implementation for a protocol, we use `defimpl` and provide it the name of the protocol.
We also declare what struct or data type the protocol is `for:`

```elixir
defimpl Adder, for: Integer do
  def add(int1, int2) do
    int1 + int2
  end
end

Adder.add(1, 2)
```

We also want the `Adder` protocol to handle strings and lists. That means we need to create
an implementation for List and String. In Elixir, the underlaying type for strings is `BitString`.

Why `BitString`? That's because under the hood Elixir represents strings with [binary](reading/binary.livemd) bits.

```elixir
defimpl Adder, for: BitString do
  def add(string1, string2) do
    string1 <> string2
  end
end

Adder.add("hello, ", "world")
```

### Your turn

In the Elixir cell below, create an implementation of Adder for lists, then call `Adder.add([1], [2])` to ensure it works.

```elixir

```
