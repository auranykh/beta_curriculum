# Integers

## Navigation

[Return Home](../start.livemd)

## Setup

Ensure you run the `ea` command to evaluate all Elixir cells before starting. Alternatively,
you can evaluate the Elixir cells as you read.

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino", override: true},
  {:kino_lab, "~> 0.1.0-dev", github: "jonatanklosko/kino_lab"},
  {:vega_lite, "~> 0.1.3"},
  {:benchee, "~> 0.1"},
  {:ecto, "~> 3.7"},
  {:math, "~> 0.7.0"},
  {:utils, path: "utils"}
])
```

## Balance The Scale

Use [Integers](../reading/integers.livemd) to balance the scale.

For example, if 10 were on the left and 20 were on the right, you would add `10`
to the left or add `-10` to the right.

<!-- livebook:{"break_markdown":true} -->

```mermaid
flowchart LR
Left --- Right
subgraph Right
100
end

subgraph Left
10
end
```

```elixir
Kino.Input.number("add ___ to the left")
```

```mermaid
flowchart LR
Left --- Right

subgraph Left
17
end

subgraph Right
13
2
5
end
```

```elixir
Kino.Input.number("add ___ to the left")
```

```mermaid
flowchart LR
Left --- Right

subgraph Left
20
end

subgraph Right
5
19
1
end
```

```elixir
Kino.Input.number("add ___ from the right")
```

```mermaid
flowchart LR
Left --- Right

subgraph Left
-5
10
end

subgraph Right
1
2
end
```

```elixir
Kino.Input.number("add ___ to the right")
```

```mermaid
flowchart LR
Left --- Right

subgraph Left
A[10 * 10]
20
end

subgraph Right
110
end
```

```elixir
Kino.Input.number("add ___ to the right")
```

```mermaid
flowchart LR
Left --- Right

subgraph Left
A[20 - 5]
10
end

subgraph Right
  20
end
```

```elixir
Kino.Input.number("add ___ to the right")
```

```mermaid
flowchart LR
Left --- Right

subgraph Left
25
end

subgraph Right
20
end
```

```elixir
Kino.Input.number("add ___ to the left")
```

## Solve for X

In the Elixir cells below, enter the result of the equation. You should use 
[Arithmetic Operators](../reading/arithmetic_operators) rather than solving the equation.

<!-- livebook:{"break_markdown":true} -->

Four plus 3 times 10.

```elixir
4 + 3 * 10
```

Ten times ten times ten.

```elixir
10 * 10 * 10
```

Ten to the power of two hundred and one.

```elixir
10 ** 201
```

Ten minus fourteen plus twelve.

```elixir
10 - 14 + 12
```

The remainder of 10 / 3.

```elixir
rem(10, 3)
```

200 divided by 3.

```elixir
200 / 3
```

Half of 214.

```elixir
214 / 2
```

75% of 456.

```elixir
456 * 0.75
```

Ten minus two times 5.

```elixir
10 - 2 * 5
```

(Ten minus two) times 5.

```elixir
(10 - 2) * 5
```

Divide 10 by 3.

```elixir
10 / 3
```

Use integer division to divide 10 by 3.

```elixir
div(10, 3)
```

Ten minus two times 10 to the power of 2.

```elixir
10 - 2 * 10 ** 2
```

Negative ten plus four.

```elixir
-10 + 4
```

Five plus negative six minus negative two.

```elixir
5 + -6 - -2
```

60 percent of 5 plus four.

```elixir
(5 + 4) * 0.6
```

Seventy divided by (ten plus two).

```elixir
70 / (10 + 2)
```
